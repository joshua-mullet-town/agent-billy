---
# Complete GiveGrove Environment - From Zero to Full Stack
- name: Complete GiveGrove Development Environment
  hosts: vm_instance
  become: yes
  vars_files:
    - secrets.yml
  vars:
    workspace_dir: "/root/GiveGrove"
    
  tasks:
    # 1. CLEAN SLATE
    - name: Kill all existing processes
      shell: |
        killall firebase 2>/dev/null || true
        killall vite 2>/dev/null || true
        killall node 2>/dev/null || true
        sleep 3
      ignore_errors: yes

    - name: Remove existing workspace
      shell: rm -rf {{ workspace_dir }}
      ignore_errors: yes

    # 2. AUTHENTICATION SETUP
    - name: Create Firebase service account key
      copy:
        content: "{{ vault_firebase_service_account_json }}"
        dest: "/root/.firebase-service-account.json"
        mode: '0600'

    - name: Set Firebase environment variable
      lineinfile:
        path: /root/.bashrc
        line: 'export GOOGLE_APPLICATION_CREDENTIALS="/root/.firebase-service-account.json"'
        create: yes

    # 3. CLONE REPOSITORY WITH AUTHENTICATION
    - name: Clone GiveGrove repository
      git:
        repo: "https://{{ vault_github_username }}:{{ vault_github_token }}@github.com/south-bend-code-works/GiveGrove.git"
        dest: "{{ workspace_dir }}"
        force: yes

    # 4. INSTALL ALL DEPENDENCIES
    - name: Install frontend dependencies
      npm:
        path: "{{ workspace_dir }}"
        state: present

    - name: Install backend dependencies
      npm:
        path: "{{ workspace_dir }}/functions"
        state: present

    # 5. BUILD BACKEND FUNCTIONS
    - name: Build Firebase functions
      shell: |
        cd {{ workspace_dir }}/functions
        export GOOGLE_APPLICATION_CREDENTIALS="/root/.firebase-service-account.json"
        npm run build
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "/root/.firebase-service-account.json"

    # 6. CREATE COMPLETE FIREBASE CONFIGURATION
    - name: Create complete Firebase runtime configuration
      copy:
        content: |
          {
            "env": {
              "service_account": {{ vault_firebase_service_account_json | to_json }}
            },
            "slack": {
              "webhook_url": "https://hooks.slack.com/mock-webhook"
            },
            "twilio": {
              "account_sid": "ACmock-account-sid",
              "auth_token": "mock-auth-token"
            },
            "send_grid": {
              "api_key": "SG.mock-api-key",
              "templates": {
                "invite": "mock-template-invite",
                "auction": {
                  "success": "mock-auction-success",
                  "failure": "mock-auction-failure"
                },
                "tickets": {
                  "success": "mock-tickets-success"
                },
                "fund_a_need": {
                  "success": "mock-fund-success"
                },
                "refund": "mock-refund-template"
              }
            },
            "stripe": {
              "secret_key": "sk_test_mock_stripe_key"
            }
          }
        dest: "{{ workspace_dir }}/functions/.runtimeconfig.json"
        mode: '0644'

    # 7. START FRONTEND SERVICE
    - name: Start frontend development server
      shell: |
        cd {{ workspace_dir }}
        nohup npm run dev -- --host 0.0.0.0 --port 3000 > /tmp/frontend.log 2>&1 &
        echo $! > /tmp/frontend.pid
      environment:
        NODE_ENV: development

    # 8. WAIT FOR FRONTEND TO START
    - name: Wait for frontend to be ready
      wait_for:
        port: 3000
        host: localhost
        delay: 5
        timeout: 60

    # 9. START BACKEND SERVICE
    - name: Start backend Firebase emulator
      shell: |
        cd {{ workspace_dir }}/functions
        export GOOGLE_APPLICATION_CREDENTIALS="/root/.firebase-service-account.json"
        nohup firebase emulators:start --only functions > /tmp/backend.log 2>&1 &
        echo $! > /tmp/backend.pid
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "/root/.firebase-service-account.json"

    # 10. WAIT FOR BACKEND TO START
    - name: Wait for backend emulator UI
      wait_for:
        port: 4000
        host: localhost
        delay: 10
        timeout: 120

    - name: Wait for functions emulator
      wait_for:
        port: 5002
        host: localhost
        delay: 5
        timeout: 60

    # 11. VERIFY SERVICES ARE RUNNING
    - name: Verify frontend is serving GiveGrove
      uri:
        url: "http://localhost:3000/"
        method: GET
        timeout: 10
      register: frontend_check
      retries: 3
      delay: 5

    - name: Verify backend emulator UI is accessible
      uri:
        url: "http://localhost:4000/"
        method: GET
        timeout: 10
      register: backend_ui_check
      retries: 3
      delay: 5

    # 12. CHECK FUNCTIONS ARE LOADED
    - name: Check if functions loaded successfully
      shell: |
        # Wait a bit more for functions to fully load
        sleep 10
        
        # Check backend log for function loading indicators
        if grep -E "(✔.*functions:|exports\.|function loaded)" /tmp/backend.log 2>/dev/null; then
          echo "FUNCTIONS_LOADED"
        else
          echo "FUNCTIONS_NOT_LOADED"
        fi
        
        # Also check if we can access function endpoints
        if curl -s http://localhost:5002/ >/dev/null 2>&1; then
          echo "FUNCTIONS_ACCESSIBLE"
        else
          echo "FUNCTIONS_NOT_ACCESSIBLE"
        fi
      register: functions_status

    # 13. TEST FRONTEND/BACKEND INTEGRATION
    - name: Test full integration
      shell: |
        echo "=== INTEGRATION TEST ==="
        
        # Test frontend
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/ 2>/dev/null)
        echo "Frontend HTTP Status: $FRONTEND_STATUS"
        
        # Test backend UI
        BACKEND_UI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ 2>/dev/null)
        echo "Backend UI HTTP Status: $BACKEND_UI_STATUS"
        
        # Test functions endpoint
        FUNCTIONS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5002/ 2>/dev/null)
        echo "Functions HTTP Status: $FUNCTIONS_STATUS"
        
        # Check if frontend content includes GiveGrove
        if curl -s http://localhost:3000/ | grep -qi "givegrove\|title\|vue"; then
          echo "Frontend Content: VALID"
        else
          echo "Frontend Content: INVALID"
        fi
        
        # Check processes
        FRONTEND_PID=$(cat /tmp/frontend.pid 2>/dev/null || echo "NONE")
        BACKEND_PID=$(cat /tmp/backend.pid 2>/dev/null || echo "NONE")
        echo "Frontend PID: $FRONTEND_PID"
        echo "Backend PID: $BACKEND_PID"
        
        # Final integration verdict
        if [ "$FRONTEND_STATUS" = "200" ] && [ "$BACKEND_UI_STATUS" = "200" ]; then
          echo "INTEGRATION_STATUS: SUCCESS"
        else
          echo "INTEGRATION_STATUS: FAILED"
        fi
      register: integration_results

    # 14. DISPLAY COMPREHENSIVE STATUS
    - name: Show current process status
      shell: |
        echo "=== PROCESS STATUS ==="
        ps aux | grep -E "(vite|firebase|node.*dev)" | grep -v grep | head -10
        
        echo "=== PORT STATUS ==="
        ss -tlnp | grep -E ":3000|:4000|:5002"
        
        echo "=== LOG SUMMARIES ==="
        echo "Frontend log (last 5 lines):"
        tail -5 /tmp/frontend.log 2>/dev/null || echo "No frontend log"
        
        echo "Backend log (last 10 lines):"
        tail -10 /tmp/backend.log 2>/dev/null || echo "No backend log"
      register: system_status

    # 15. FINAL RESULTS
    - name: Display complete environment status
      debug:
        msg: |
          🚀 COMPLETE GIVEGROVE ENVIRONMENT STATUS 🚀
          ================================================
          
          🔐 AUTHENTICATION:
          ✅ Git: Repository cloned with Personal Access Token
          ✅ Firebase: Service account authenticated
          
          📦 SERVICES:
          - Frontend (Vue/Vite): {{ 'RUNNING' if frontend_check.status == 200 else 'FAILED' }}
          - Backend UI (Firebase): {{ 'RUNNING' if backend_ui_check.status == 200 else 'FAILED' }}
          - Functions: {{ functions_status.stdout }}
          
          🔗 INTEGRATION:
          {{ integration_results.stdout }}
          
          🌐 ACCESS URLS:
          - Frontend: http://{{ ansible_host }}:3000
          - Backend UI: http://{{ ansible_host }}:4000
          - Functions: http://{{ ansible_host }}:5002
          
          {% if frontend_check.status == 200 and backend_ui_check.status == 200 %}
          🎉 SUCCESS! Complete environment is running!
          
          The full GiveGrove development environment is ready:
          • Frontend serving on port 3000
          • Backend emulator on port 4000
          • Functions accessible on port 5002
          • All services authenticated and communicating
          
          This environment is ready for Agent Billy! 🤖
          {% else %}
          ❌ Environment has issues. Check logs above.
          {% endif %}

    - name: Display system details for debugging
      debug:
        var: system_status.stdout_lines