---
# Complete GiveGrove Environment - From Zero to Full Stack
- name: Complete GiveGrove Development Environment
  hosts: vm_instance
  become: yes
  vars_files:
    - secrets.yml
  vars:
    workspace_dir: "/home/ubuntu/GiveGrove"
    node_version: "20.17.0"
    npm_version: "10.6.0"
    firebase_cli_version: "13.27.0"
    
  tasks:
    # 1. CLEAN SLATE
    - name: Kill all existing processes
      shell: |
        killall firebase 2>/dev/null || true
        killall vite 2>/dev/null || true
        killall node 2>/dev/null || true
        sleep 3
      ignore_errors: yes

    - name: Remove existing workspace
      shell: rm -rf {{ workspace_dir }}
      ignore_errors: yes

    # 2. AUTHENTICATION SETUP
    - name: Create Firebase service account key
      copy:
        content: "{{ vault_firebase_service_account_json }}"
        dest: "/home/ubuntu/.firebase-service-account.json"
        mode: '0600'
        owner: ubuntu
        group: ubuntu

    - name: Set Firebase environment variable
      lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export GOOGLE_APPLICATION_CREDENTIALS="/home/ubuntu/.firebase-service-account.json"'
        create: yes
        owner: ubuntu
        group: ubuntu

    # 3. SYSTEM DEPENDENCIES & NODE.JS INSTALLATION (THE MISSING PIECE!)
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          - curl
          - wget
          - git
          - build-essential
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - python3
          - python3-pip
        state: present
        lock_timeout: 300  # Wait up to 5 minutes for dpkg lock
      register: apt_system_deps
      until: apt_system_deps is not failed
      retries: 10   # Try up to 10 times
      delay: 30     # Wait 30 seconds between retries

    - name: Add NodeSource repository key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: Add NodeSource repository
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_20.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Remove conflicting Node.js packages
      apt:
        name:
          - nodejs
          - npm
          - libnode-dev
          - libnode72
        state: absent
        purge: yes
        lock_timeout: 300
      register: apt_remove_nodejs
      until: apt_remove_nodejs is not failed
      retries: 10
      delay: 30
      ignore_errors: yes

    - name: Clean up leftover Node.js packages
      shell: apt autoremove -y
      ignore_errors: yes

    - name: Install Node.js 20.x from NodeSource (Required by GiveGrove)
      apt:
        name: nodejs
        state: present
        update_cache: yes
        lock_timeout: 300
      register: apt_install_nodejs
      until: apt_install_nodejs is not failed
      retries: 10
      delay: 30

    - name: Verify Node.js version (must be 20.x)
      shell: node --version
      register: node_version_check
      changed_when: false

    - name: Display Node.js version
      debug:
        msg: "Node.js version: {{ node_version_check.stdout }}"

    - name: Fail if Node.js version is not 20.x
      fail:
        msg: "Node.js version {{ node_version_check.stdout }} is not compatible. GiveGrove requires >= 20.17.0"
      when: node_version_check.stdout is not match("^v20\.")

    - name: Verify npm version
      shell: npm --version
      register: npm_version_check
      changed_when: false

    - name: Display npm version
      debug:
        msg: "npm version: {{ npm_version_check.stdout }}"

    # 4. GUI ENVIRONMENT SETUP (ASYNC TO PREVENT TIMEOUT)
    - name: Install GUI packages asynchronously
      apt:
        name:
          - xvfb
          - fluxbox
          - x11vnc
          - firefox
          - chromium-browser
          - xterm
        state: present
        lock_timeout: 300
      register: apt_gui_packages
      until: apt_gui_packages is not failed
      retries: 10
      delay: 30
      async: 3600  # 1 hour timeout for package installation
      poll: 30     # Check every 30 seconds

    # 5. CLONE REPOSITORY WITH AUTHENTICATION
    - name: Clone GiveGrove repository
      git:
        repo: "https://{{ vault_github_token }}@github.com/south-bend-code-works/GiveGrove.git"
        dest: "{{ workspace_dir }}"
        force: yes
      become_user: ubuntu

    - name: Set workspace ownership
      file:
        path: "{{ workspace_dir }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    # 6. INSTALL FIREBASE CLI
    - name: Install Firebase CLI globally
      npm:
        name: firebase-tools
        global: yes
        version: "{{ firebase_cli_version }}"

    # 6.1. INSTALL CLAUDE CODE CLI
    - name: Install Claude Code CLI globally
      npm:
        name: "@anthropic-ai/claude-code"
        global: yes
        state: present
      become: yes

    # GitHub CLI installation - FIXED: Individual tasks instead of failing multi-line shell
    - name: Add GitHub CLI GPG key  
      get_url:
        url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
        dest: /usr/share/keyrings/githubcli-archive-keyring.gpg
        mode: '0644'
      become: yes
        
    - name: Add GitHub CLI repository
      apt_repository:
        repo: "deb [arch={{ ansible_architecture | replace('x86_64', 'amd64') }} signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
        state: present
        update_cache: yes
      become: yes
        
    - name: Install GitHub CLI
      apt:
        name: gh
        state: present
        lock_timeout: 300
      register: apt_install_gh
      until: apt_install_gh is not failed
      retries: 10
      delay: 30
      become: yes

    - name: Configure GitHub CLI authentication
      shell: |
        echo "{{ vault_github_token }}" | gh auth login --with-token
        gh auth status
      become_user: ubuntu
      environment:
        HOME: "/home/ubuntu"

    - name: Verify Claude Code CLI installation
      shell: which claude && claude --version
      register: claude_version
      changed_when: false
      failed_when: false

    - name: Display Claude Code CLI version
      debug:
        msg: "Claude Code CLI version: {{ claude_version.stdout }}"

    # 6.2. CONFIGURE CLAUDE CODE CLI AUTHENTICATION
    - name: Set ANTHROPIC_API_KEY in bashrc for Claude Code CLI
      lineinfile:
        path: /home/ubuntu/.bashrc
        line: 'export ANTHROPIC_API_KEY="{{ vault_anthropic_api_key }}"'
        create: yes
        owner: ubuntu
        group: ubuntu

    - name: Configure Claude Code CLI authentication
      shell: |
        export ANTHROPIC_API_KEY="{{ vault_anthropic_api_key }}"
        export PATH="/usr/local/bin:$PATH"
        cd {{ workspace_dir }}
        timeout 30s bash -c "echo '2 + 2' | claude --print"
      become_user: ubuntu
      register: claude_auth_test
      changed_when: false
      failed_when: false
      ignore_errors: yes

    - name: Display Claude Code CLI authentication result
      debug:
        msg: "Claude Code CLI authentication: {{ 'SUCCESS' if claude_auth_test.rc == 0 else 'FAILED' }} - {{ claude_auth_test.stdout }} {{ claude_auth_test.stderr }}"

    # 7. INSTALL ALL DEPENDENCIES (FIXED: Using --ignore-scripts to bypass chromedriver/phantomjs failures)
    - name: Install frontend dependencies with --ignore-scripts
      shell: |
        cd {{ workspace_dir }}
        npm install --ignore-scripts
      become_user: ubuntu
      environment:
        HOME: "/home/ubuntu"

    - name: Install backend dependencies with --ignore-scripts
      shell: |
        cd {{ workspace_dir }}/functions
        npm install --ignore-scripts
      become_user: ubuntu
      environment:
        HOME: "/home/ubuntu"

    # 7.1. SETUP CLAUDE CODE WITH PLAYWRIGHT MCP
    - name: Add Playwright MCP server to Claude Code
      shell: |
        export ANTHROPIC_API_KEY="{{ vault_anthropic_api_key }}"
        export PATH="/usr/local/bin:$PATH"
        cd {{ workspace_dir }}
        claude mcp add playwright npx -- @playwright/mcp@latest
      become_user: ubuntu
      environment:
        HOME: "/home/ubuntu"
      register: playwright_mcp_install
      changed_when: false
      failed_when: false
      ignore_errors: yes

    - name: Verify Playwright MCP installation
      shell: |
        cd {{ workspace_dir }}
        if [ -f ~/.claude.json ]; then
          cat ~/.claude.json | grep -A 10 playwright || echo "Playwright MCP not found in config"
        else
          echo "Claude config file not found"
        fi
      become_user: ubuntu
      register: playwright_mcp_check
      changed_when: false

    - name: Display Playwright MCP configuration
      debug:
        msg: "Playwright MCP configuration: {{ playwright_mcp_check.stdout }}"

    # 8. GUI ENVIRONMENT STARTUP
    - name: Start X virtual framebuffer
      shell: |
        pkill Xvfb || true
        Xvfb :99 -screen 0 1920x1080x24 &
        sleep 3
      args:
        executable: /bin/bash

    - name: Start window manager
      shell: |
        export DISPLAY=:99
        pkill fluxbox || true
        DISPLAY=:99 fluxbox &
        sleep 3
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":99"

    - name: Start VNC server
      shell: |
        export DISPLAY=:99
        pkill x11vnc || true
        DISPLAY=:99 x11vnc -display :99 -forever -shared -bg -nopw -xkb -listen 0.0.0.0 -rfbport 5900
        sleep 3
      args:
        executable: /bin/bash
      environment:
        DISPLAY: ":99"

    # 8.1. VERIFY VNC SERVER IS RUNNING
    - name: Verify VNC server is running
      shell: |
        sleep 5
        if pgrep x11vnc > /dev/null; then
          echo "VNC server is running"
          ss -tlnp | grep 5900 || echo "Port 5900 not listening"
        else
          echo "VNC server failed to start"
          exit 1
        fi
      register: vnc_check
      failed_when: "'VNC server failed to start' in vnc_check.stdout"
      changed_when: false

    - name: Display VNC server status
      debug:
        msg: "VNC server status: {{ vnc_check.stdout }}"

    # 9. BUILD BACKEND FUNCTIONS
    - name: Build Firebase functions
      shell: |
        cd {{ workspace_dir }}/functions
        npm run build
      become_user: ubuntu
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "/home/ubuntu/.firebase-service-account.json"

    # 6. CREATE COMPLETE FIREBASE CONFIGURATION
    - name: Create complete Firebase runtime configuration
      copy:
        content: |
          {
            "env": {
              "service_account": {{ vault_firebase_service_account_json | to_json }}
            },
            "slack": {
              "webhook_url": "https://hooks.slack.com/mock-webhook"
            },
            "twilio": {
              "account_sid": "ACmock-account-sid",
              "auth_token": "mock-auth-token"
            },
            "send_grid": {
              "api_key": "SG.mock-api-key",
              "templates": {
                "invite": "mock-template-invite",
                "auction": {
                  "success": "mock-auction-success",
                  "failure": "mock-auction-failure"
                },
                "tickets": {
                  "success": "mock-tickets-success"
                },
                "fund_a_need": {
                  "success": "mock-fund-success"
                },
                "refund": "mock-refund-template"
              }
            },
            "stripe": {
              "secret_key": "sk_test_mock_stripe_key"
            }
          }
        dest: "{{ workspace_dir }}/functions/.runtimeconfig.json"
        mode: '0644'

    # 10. START FRONTEND SERVICE
    - name: Start frontend development server
      shell: |
        cd {{ workspace_dir }}
        nohup npm run dev -- --host 0.0.0.0 --port 3000 > /tmp/frontend.log 2>&1 &
        echo $! > /tmp/frontend.pid
      become_user: ubuntu
      environment:
        NODE_ENV: development
        GOOGLE_APPLICATION_CREDENTIALS: "/home/ubuntu/.firebase-service-account.json"

    # 8. WAIT FOR FRONTEND TO START
    - name: Wait for frontend to be ready
      wait_for:
        port: 3000
        host: localhost
        delay: 15
        timeout: 300

    # 11. START BACKEND SERVICE
    - name: Start backend Firebase emulator
      shell: |
        cd {{ workspace_dir }}
        nohup firebase emulators:start --only functions > /tmp/backend.log 2>&1 &
        echo $! > /tmp/backend.pid
      become_user: ubuntu
      environment:
        GOOGLE_APPLICATION_CREDENTIALS: "/home/ubuntu/.firebase-service-account.json"

    # 10. WAIT FOR BACKEND TO START
    - name: Wait for backend emulator UI
      wait_for:
        port: 4000
        host: localhost
        delay: 15
        timeout: 180

    - name: Wait for functions emulator
      wait_for:
        port: 5002
        host: localhost
        delay: 10
        timeout: 120

    # 11. VERIFY SERVICES ARE RUNNING
    - name: Verify frontend is serving GiveGrove
      uri:
        url: "http://localhost:3000/"
        method: GET
        timeout: 10
      register: frontend_check
      retries: 3
      delay: 5

    - name: Verify backend emulator UI is accessible
      uri:
        url: "http://localhost:4000/"
        method: GET
        timeout: 10
      register: backend_ui_check
      retries: 3
      delay: 5

    # 12. CHECK FUNCTIONS ARE LOADED
    - name: Check if functions loaded successfully
      shell: |
        # Wait a bit more for functions to fully load
        sleep 10
        
        # Check backend log for function loading indicators
        if grep -E "(✔.*functions:|exports\.|function loaded)" /tmp/backend.log 2>/dev/null; then
          echo "FUNCTIONS_LOADED"
        else
          echo "FUNCTIONS_NOT_LOADED"
        fi
        
        # Also check if we can access function endpoints
        if curl -s http://localhost:5002/ >/dev/null 2>&1; then
          echo "FUNCTIONS_ACCESSIBLE"
        else
          echo "FUNCTIONS_NOT_ACCESSIBLE"
        fi
      register: functions_status

    # 13. TEST FRONTEND/BACKEND INTEGRATION
    - name: Test full integration
      shell: |
        echo "=== INTEGRATION TEST ==="
        
        # Test frontend
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/ 2>/dev/null)
        echo "Frontend HTTP Status: $FRONTEND_STATUS"
        
        # Test backend UI
        BACKEND_UI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ 2>/dev/null)
        echo "Backend UI HTTP Status: $BACKEND_UI_STATUS"
        
        # Test functions endpoint
        FUNCTIONS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5002/ 2>/dev/null)
        echo "Functions HTTP Status: $FUNCTIONS_STATUS"
        
        # Check if frontend content includes GiveGrove
        if curl -s http://localhost:3000/ | grep -qi "givegrove\|title\|vue"; then
          echo "Frontend Content: VALID"
        else
          echo "Frontend Content: INVALID"
        fi
        
        # Check processes
        FRONTEND_PID=$(cat /tmp/frontend.pid 2>/dev/null || echo "NONE")
        BACKEND_PID=$(cat /tmp/backend.pid 2>/dev/null || echo "NONE")
        echo "Frontend PID: $FRONTEND_PID"
        echo "Backend PID: $BACKEND_PID"
        
        # Final integration verdict
        if [ "$FRONTEND_STATUS" = "200" ] && [ "$BACKEND_UI_STATUS" = "200" ]; then
          echo "INTEGRATION_STATUS: SUCCESS"
        else
          echo "INTEGRATION_STATUS: FAILED"
        fi
      register: integration_results

    # 14. DISPLAY COMPREHENSIVE STATUS
    - name: Show current process status
      shell: |
        echo "=== PROCESS STATUS ==="
        ps aux | grep -E "(vite|firebase|node.*dev)" | grep -v grep | head -10
        
        echo "=== PORT STATUS ==="
        ss -tlnp | grep -E ":3000|:4000|:5002"
        
        echo "=== LOG SUMMARIES ==="
        echo "Frontend log (last 5 lines):"
        tail -5 /tmp/frontend.log 2>/dev/null || echo "No frontend log"
        
        echo "Backend log (last 10 lines):"
        tail -10 /tmp/backend.log 2>/dev/null || echo "No backend log"
      register: system_status

    # 15. COORDINATOR POLLING SETUP
    - name: Create coordinator polling script
      copy:
        content: |
          #!/bin/bash
          # Billy Coordinator Polling Script
          COORDINATOR_URL="https://agent-billy-production.up.railway.app/coordinator/next-step"
          LOG_FILE="/home/ubuntu/coordinator.log"
          
          echo "$(date): Coordinator polling started" >> $LOG_FILE
          
          while true; do
            echo "$(date): Polling coordinator..." >> $LOG_FILE
            
            # Poll coordinator for next step
            RESPONSE=$(curl -s -X POST "$COORDINATOR_URL" \
              -H "Content-Type: application/json" \
              -d '{
                "vm_ip": "'$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)'",
                "status": "ready",
                "phase": "implementation"
              }' 2>>$LOG_FILE)
            
            if [ $? -eq 0 ] && [ ! -z "$RESPONSE" ]; then
              echo "$(date): Coordinator response: $RESPONSE" >> $LOG_FILE
              
              # Parse response and execute if action provided
              ACTION=$(echo "$RESPONSE" | jq -r '.action // empty' 2>/dev/null)
              PROMPT=$(echo "$RESPONSE" | jq -r '.prompt // empty' 2>/dev/null)
              
              if [ "$ACTION" = "execute_claude" ] && [ ! -z "$PROMPT" ]; then
                echo "$(date): Executing Claude CLI with prompt" >> $LOG_FILE
                cd {{ workspace_dir }}
                export ANTHROPIC_API_KEY="{{ vault_anthropic_api_key }}"
                timeout 300s bash -c "echo \"$PROMPT\" | claude --print" >> $LOG_FILE 2>&1
                echo "$(date): Claude CLI execution completed" >> $LOG_FILE
              elif [ "$ACTION" = "complete" ]; then
                echo "$(date): Coordinator workflow complete" >> $LOG_FILE
                break
              fi
            else
              echo "$(date): No coordinator response or error" >> $LOG_FILE
            fi
            
            # Wait 30 seconds before next poll
            sleep 30
          done
        dest: "/home/ubuntu/coordinator-polling.sh"
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    - name: Start coordinator polling in background
      shell: |
        cd /home/ubuntu
        nohup ./coordinator-polling.sh > /dev/null 2>&1 &
        echo $! > coordinator-polling.pid
        echo "Coordinator polling started with PID $(cat coordinator-polling.pid)"
      become_user: ubuntu

    - name: Verify coordinator polling is running
      shell: |
        sleep 5
        if [ -f /home/ubuntu/coordinator-polling.pid ]; then
          PID=$(cat /home/ubuntu/coordinator-polling.pid)
          if ps -p $PID > /dev/null; then
            echo "Coordinator polling is running (PID: $PID)"
          else
            echo "Coordinator polling failed to start"
            exit 1
          fi
        else
          echo "Coordinator polling PID file not found"
          exit 1
        fi
      register: coordinator_status

    - name: Display coordinator polling status
      debug:
        msg: "Coordinator polling status: {{ coordinator_status.stdout }}"

    # 16. FINAL RESULTS
    - name: Display complete environment status
      debug:
        msg: |
          🚀 COMPLETE GIVEGROVE ENVIRONMENT STATUS 🚀
          ================================================
          
          🔐 AUTHENTICATION:
          ✅ Git: Repository cloned with Personal Access Token
          ✅ Firebase: Service account authenticated
          ✅ Claude Code: CLI installed and configured
          ✅ Playwright MCP: Server configured for Claude Code
          
          📦 SERVICES:
          - Frontend (Vue/Vite): {{ 'RUNNING' if frontend_check.status == 200 else 'FAILED' }}
          - Backend UI (Firebase): {{ 'RUNNING' if backend_ui_check.status == 200 else 'FAILED' }}
          - Functions: {{ functions_status.stdout }}
          
          🔗 INTEGRATION:
          {{ integration_results.stdout }}
          
          🌐 ACCESS URLS:
          - Frontend: http://{{ ansible_host }}:3000
          - Backend UI: http://{{ ansible_host }}:4000
          - Functions: http://{{ ansible_host }}:5002
          
          {% if frontend_check.status == 200 and backend_ui_check.status == 200 %}
          🎉 SUCCESS! Complete environment is running!
          
          The full GiveGrove development environment is ready:
          • Frontend serving on port 3000
          • Backend emulator on port 4000
          • Functions accessible on port 5002
          • VNC server accessible on port 5900
          • Claude Code CLI with Playwright MCP configured
          • All services authenticated and communicating
          
          This environment is ready for autonomous Agent Billy! 🤖✨
          {% else %}
          ❌ Environment has issues. Check logs above.
          {% endif %}

    - name: Display system details for debugging
      debug:
        var: system_status.stdout_lines