---
# Complete Full Stack Test - Spin Up Everything and Test Integration
- name: Full Stack GiveGrove Environment Test
  hosts: vm_instance
  become: yes
  vars_files:
    - secrets.yml
  vars:
    workspace_dir: "/root/GiveGrove"
    
  tasks:
    # Clean slate
    - name: Remove any existing GiveGrove directory
      shell: rm -rf {{ workspace_dir }}

    - name: Stop any existing processes
      shell: |
        killall firebase 2>/dev/null || true
        killall vite 2>/dev/null || true
        killall node 2>/dev/null || true
        sleep 3
      ignore_errors: yes

    # Clone with authentication
    - name: Clone repository with authentication
      git:
        repo: "https://{{ vault_github_username }}:{{ vault_github_token }}@github.com/south-bend-code-works/GiveGrove.git"
        dest: "{{ workspace_dir }}"

    # Set up Firebase authentication
    - name: Create Firebase service account key
      copy:
        content: "{{ vault_firebase_service_account_json }}"
        dest: "/root/.firebase-service-account.json"
        mode: '0600'

    # Install all dependencies
    - name: Install frontend dependencies
      npm:
        path: "{{ workspace_dir }}"
        state: present

    - name: Install backend dependencies
      npm:
        path: "{{ workspace_dir }}/functions"
        state: present

    # Build backend
    - name: Build Firebase functions
      shell: |
        cd {{ workspace_dir }}/functions
        export GOOGLE_APPLICATION_CREDENTIALS="/root/.firebase-service-account.json"
        npm run build

    # Create complete Firebase runtime config
    - name: Create complete Firebase runtime configuration
      copy:
        content: |
          {
            "env": {
              "service_account": "{{ vault_firebase_service_account_json | to_json }}"
            },
            "slack": {
              "webhook_url": "https://hooks.slack.com/mock"
            },
            "twilio": {
              "account_sid": "ACmock-account-sid",
              "auth_token": "mock-auth-token"
            },
            "send_grid": {
              "api_key": "SG.mock-api-key",
              "templates": {
                "invite": "mock-template-id",
                "auction": {
                  "success": "mock-auction-success-template",
                  "failure": "mock-auction-failure-template"
                },
                "tickets": {
                  "success": "mock-tickets-success-template"
                },
                "fund_a_need": {
                  "success": "mock-fund-success-template"
                },
                "refund": "mock-refund-template"
              }
            },
            "stripe": {
              "secret_key": "sk_test_mock_key"
            }
          }
        dest: "{{ workspace_dir }}/functions/.runtimeconfig.json"

    # Start frontend
    - name: Start frontend development server
      shell: |
        cd {{ workspace_dir }}
        nohup npm run dev -- --host 0.0.0.0 --port 3000 > /tmp/frontend.log 2>&1 &
        sleep 10

    # Start backend
    - name: Start backend with authentication
      shell: |
        cd {{ workspace_dir }}/functions
        export GOOGLE_APPLICATION_CREDENTIALS="/root/.firebase-service-account.json"
        nohup firebase emulators:start --only functions > /tmp/backend.log 2>&1 &
        sleep 20

    # THE BIG TEST - Frontend/Backend Integration
    - name: Test frontend is serving
      uri:
        url: "http://localhost:3000/"
        method: GET
        timeout: 10
      register: frontend_test

    - name: Test backend emulator UI is accessible
      uri:
        url: "http://localhost:4000/"
        method: GET
        timeout: 10
      register: backend_ui_test

    - name: Test if functions are loaded
      shell: |
        # Check if functions loaded in backend log
        if grep -q "✔.*functions:" /tmp/backend.log 2>/dev/null; then
          echo "FUNCTIONS_LOADED"
        else
          echo "FUNCTIONS_NOT_LOADED"
        fi
      register: functions_check

    - name: Test frontend/backend connectivity
      shell: |
        # Try to make a request from frontend to backend
        # This simulates what the frontend would do
        cd {{ workspace_dir }}
        
        # Check if frontend can reach backend
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/ 2>/dev/null || echo "000")
        BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/ 2>/dev/null || echo "000")
        
        echo "FRONTEND_HTTP_CODE:$FRONTEND_STATUS"
        echo "BACKEND_HTTP_CODE:$BACKEND_STATUS"
        
        # Check if both are responding
        if [ "$FRONTEND_STATUS" = "200" ] && [ "$BACKEND_STATUS" = "200" ]; then
          echo "INTEGRATION_SUCCESS"
        else
          echo "INTEGRATION_PARTIAL"
        fi
      register: integration_test

    # Display comprehensive results
    - name: Show process status
      shell: |
        echo "=== Process Status ==="
        ps aux | grep -E "(vite|firebase)" | grep -v grep || echo "No dev processes found"
        
        echo "=== Port Status ==="
        ss -tlnp | grep -E ":3000|:4000|:5002" || echo "No expected ports found"
        
        echo "=== Frontend Log (last 5 lines) ==="
        tail -5 /tmp/frontend.log 2>/dev/null || echo "No frontend log"
        
        echo "=== Backend Log (last 10 lines) ==="
        tail -10 /tmp/backend.log 2>/dev/null || echo "No backend log"
      register: status_check

    - name: Display final results
      debug:
        msg: |
          🚀 FULL STACK INTEGRATION TEST RESULTS 🚀
          
          📊 Service Status:
          - Frontend: {{ 'WORKING' if frontend_test.status == 200 else 'FAILED' }}
          - Backend UI: {{ 'WORKING' if backend_ui_test.status == 200 else 'FAILED' }}
          - Functions: {{ 'LOADED' if 'FUNCTIONS_LOADED' in functions_check.stdout else 'NOT_LOADED' }}
          
          🔗 Integration Test:
          {{ integration_test.stdout }}
          
          🎯 Result: 
          {% if frontend_test.status == 200 and backend_ui_test.status == 200 and 'INTEGRATION_SUCCESS' in integration_test.stdout %}
          ✅ SUCCESS! Full stack environment is working with authentication!
          
          Access URLs:
          - Frontend: http://{{ ansible_host }}:3000
          - Backend UI: http://{{ ansible_host }}:4000
          - Functions: http://{{ ansible_host }}:5002
          
          🔐 Authentication verified:
          ✅ Git clone successful with Personal Access Token
          ✅ Firebase functions loaded with Service Account
          ✅ Frontend and backend communicating via localhost
          
          The complete environment is ready for Agent Billy! 🤖
          {% else %}
          ❌ Integration issues detected. Check logs above.
          {% endif %}

    - name: Display system status for debugging
      debug:
        var: status_check.stdout_lines